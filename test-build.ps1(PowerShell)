@"
Write-Host "=== PowerShell Docker Build Test ===" -ForegroundColor Green

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10)
`$requiredFiles = @(
    "Dockerfile.python",
    "requirements.txt", 
    "main.py"
)

function Test-FileExists {
    param([string]`$FilePath)
    if (Test-Path `$FilePath) {
        Write-Host "‚úÖ Found: `$FilePath" -ForegroundColor Green
        return `$true
    } else {
        Write-Host "‚ùå ERROR: `$FilePath not found" -ForegroundColor Red
        return `$false
    }
}

Write-Host "`nüìÅ Checking required files (`$(`$requiredFiles.Count) files)..." -ForegroundColor Yellow

`$filesValid = `$true
`$checkedCount = 0

foreach (`$file in `$requiredFiles) {
    if (`$checkedCount -ge 10) {
        Write-Host "‚ö†Ô∏è  Maximum file check limit reached (10 files)" -ForegroundColor Yellow
        break
    }
    
    `$filesValid = Test-FileExists `$file -and `$filesValid
    `$checkedCount++
}

if (-not `$filesValid) {
    Write-Host "‚ùå Missing required files. Aborting." -ForegroundColor Red
    Write-Host "Press any key to exit..." -ForegroundColor Yellow
    `$null = `$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

Write-Host "`nüê≥ Checking Docker..." -ForegroundColor Yellow
try {
    `$dockerVersion = docker --version 2>&1
    if (`$LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Docker is available: `$dockerVersion" -ForegroundColor Green
    } else {
        throw "Docker not responding"
    }
} catch {
    Write-Host "‚ùå Docker not found or not running. Please install/start Docker." -ForegroundColor Red
    Write-Host "Press any key to exit..." -ForegroundColor Yellow
    `$null = `$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

Write-Host "`nüî® Building Docker image..." -ForegroundColor Yellow
docker build -t powershell-test-app -f Dockerfile.python .

if (`$LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Build successful!" -ForegroundColor Green
    
    Write-Host "üöÄ Testing container..." -ForegroundColor Yellow
    docker run -d --name ps-test-container -p 5000:5000 powershell-test-app
    
    Write-Host "‚è≥ Waiting for startup (10 seconds)..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    Write-Host "üè• Health check..." -ForegroundColor Yellow
    try {
        `$response = Invoke-WebRequest -Uri "http://localhost:5000/health" -UseBasicParsing -TimeoutSec 5
        Write-Host "‚úÖ Application health: `$(`$response.Content)" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Health check failed: `$(`$_.Exception.Message)" -ForegroundColor Yellow
    }
    
    Write-Host "üßπ Cleaning up..." -ForegroundColor Yellow
    docker stop ps-test-container 2>`$null
    docker rm ps-test-container 2>`$null
    Write-Host "‚úÖ Cleanup complete" -ForegroundColor Green
    
} else {
    Write-Host "‚ùå Build failed" -ForegroundColor Red
    Write-Host "Press any key to exit..." -ForegroundColor Yellow
    `$null = `$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

Write-Host "`n=== Test completed successfully ===" -ForegroundColor Green
Write-Host "Press any key to continue..." -ForegroundColor Yellow
`$null = `$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
"@ | Out-File -FilePath "test-build.ps1" -Encoding utf8
